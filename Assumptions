#We assume that physical address to Cache mapping is known, in particular, we know the position of set index bits.

#Threshold found for L3 is (80-120). 

#If set is filled for any block then does it searches for free space in other slices or uses cache replacement policy in the same slice? - From our code seems that replacement policy is across slices, and former is true. 

#Index bits for L2 is same as Index bits for L3. 6-15 bits are used to decide set. Hence to evict any block whose addresss is x from L2 only, just access x+2^16*i where i is from 1 to 4. 

#When running only for 31 blocks then all have latency of about 60 which means coming from L2 Cache, but associativity of L2 is 4, how?

#Latency of L3 coming to be 50-240. 

#L3 hits are distributed based on slice. Timing of about 200 for own slice and 250 for other slices. Good result. 

#modprobe msr && rdmsr -p0 0x1a4 && wrmsr -p0 0x1a4 15 for turning off hardware prefetching on processor 0. An alternative to randomised accesses. 

#sudo sysctl -p is required for loading huge pages before exporting. 

#gcc -g -O0 util.c random_l2evict.c && ./a.out > temp && python plot_l2_evict.py temp

#Even if memory hits are zero for one iteration that means that is not the minimal number required to evict one cache line.

#We tuned the limit of l3 latency to 230 which gives at least 1 memory hit for 77 blocks in a script of 5000, and 64 gives zero at least once in script of 5000. 

#For thrashing one specific L3 cache set, so that it is empty before experimentation, access x,x+2^16,x+2^16*2...x+2^16*64 and then flush each of them. 

#After eviciting exactly one block from L3 by accessing 65 blocks and monitoring exactly one memory hit.

#wrmsr -p0 0x1a4 15 && wrmsr -p1 0x1a4 15 && wrmsr -p2 0x1a4 15 && wrmsr -p3 0x1a4 15

#Force the accesses to one slice by seeing the latency difference, monitor replacement policy in one slice. 

#Only 10 sets are "halting" 0-10, not halting for onwards 11, might be 10 leader sets, 2^10=1024. 

#210-230 slice of other. 60-210 my own slice. 

#More nice behaviour only working on set number 257 or random number instead of set 0 or 1 , as such sets will cause address to be quite generic so other processes can interfere. 


#Calculate the thresholds dynamically!. - imp

#4th Block is evicted when accessing in a slice. - 14,14,7,8.
Predominantly 14,15 are evicted!!! - MRU type of policy in Set number 258. 
Predominantly 0,1 getting evicted (30% of time) - LRU type policy in Set Number 0.

